#!/usr/bin/env python

# compiz-deskmenu is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# compiz-deskmenu is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author(s): crdlb
# Copyright 2008 Christopher Williams <christopherw@verizon.net> 

import gtk
import dbus, dbus.service
from dbus.mainloop.glib import DBusGMainLoop
import os, sys, glob, signal, subprocess
from xdg.DesktopEntry import DesktopEntry, xdg_config_home

try:
	import wnck
except ImportError:
	USE_WNCK = False
else:
	USE_WNCK = True

interface = 'org.compiz_fusion.deskmenu'
service = 'org.compiz_fusion.deskmenu'

class DeskMenu(gtk.Menu):
	
	def __init__(self):
		gtk.Menu.__init__(self)

		launchers = self.get_launchers()

		for launcher in sorted(launchers):
			
			launcher = launchers[launcher]
			item = gtk.ImageMenuItem(launcher.name)
			item.connect('activate', self.activate_launcher, launcher)
			if launcher.icon:
				item.props.image = gtk.image_new_from_icon_name(launcher.icon, gtk.ICON_SIZE_MENU)
			self.append(item)

		if USE_WNCK:
			self.add(gtk.SeparatorMenuItem())
			self.screen = wnck.screen_get_default()
			self.screen.force_update()
			item = gtk.MenuItem('Windows')
			self.window_menu = gtk.Menu()
			item.set_submenu(self.window_menu)
			#item.connect('activate-item', self.populate_window_menu)
			self.add(item)

		item = gtk.ImageMenuItem('Reload')
		item.props.image = gtk.image_new_from_stock('gtk-refresh', gtk.ICON_SIZE_MENU)
		item.connect('activate', self.quit_activate)
		self.append(item)

	def get_launchers(self):
	
		launchers = {}
	 	for path in glob.glob(os.path.join(xdg_config_home, 'compiz/deskmenu/*')):
	 		name = path.split()[-1]
			launcher = Launcher(path)
			launchers[name] = launcher
		return launchers

	def activate_launcher(self, item, launcher):
		launcher.run()

	def quit_activate(self, widget):
		gtk.main_quit()

	def show_menu(self):
		self.show_all()
		self.popup(None, None, None, 0, 0)

	def populate_window_menu(self):	
		submenu = self.window_menu
		print self.screen.get_windows()
		for item in submenu.get_children():
			submenu.remove(item)
		for window in (w for w in self.screen.get_windows() if not w.is_skip_tasklist()):
			pixbuf = window.get_mini_icon()
			if window.is_shaded():
				title = '=%s=' % window.get_name()
			elif window.is_minimized():
				title = '[%s]' % window.get_name()
			else:
				title = window.get_name()
				
			if pixbuf:
				item = gtk.ImageMenuItem(title)
				item.props.image = gtk.image_new_from_icon_set(gtk.IconSet(pixbuf), gtk.ICON_SIZE_MENU)
			else:
				item = gtk.MenuItem(title)
			item.connect('activate', self.activate_window, window)
			submenu.append(item)
		submenu.show_all()

	def reload_activate(self, widget):
		pass

	def activate_window(self, item, window):
		workspace = window.get_workspace()
		event_time = gtk.get_current_event_time()
		if workspace:
			workspace.activate(event_time)
		window.activate(event_time)

class Launcher(object):

	def __init__(self, launcher):

		self.desktop = DesktopEntry(launcher)
		self.name = self.desktop.getName()
		self.icon = self.desktop.getIcon()
		if '.' in self.icon:
			self.icon = self.icon.split('.')[0]
		
	def run(self):
		try:
			Exec = self.desktop.getExec().split()
			if Exec[-1].startswith('%'):
				Exec = Exec[:-1]
			subprocess.Popen(Exec, cwd=os.path.expanduser('~'))
		except OSError:
			print '%s:%s:file not found' % (Exec, sys.argv[0])

class DeskMenuObject(dbus.service.Object):

	@dbus.service.method(interface, in_signature='', out_signature='')
	def show(self):
		print 'showing menu'
		if USE_WNCK:
			menu.populate_window_menu()
		menu.show_menu()

DBusGMainLoop(set_as_default=True)

session_bus = dbus.SessionBus()

signal.signal(signal.SIGCHLD, signal.SIG_IGN)

# make menu
name = dbus.service.BusName(service, session_bus)
menu = DeskMenu()
deskmenu = DeskMenuObject(session_bus, '/org/compiz_fusion/deskmenu/menu')
gtk.main()

